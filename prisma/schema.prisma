generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  firstName          String
  lastName           String
  identification     String              @unique
  phone              String
  age                Int?                // Opcional
  gender             String?             // Opcional
  medicalConditions  String?             // Opcional
  role               String
  email              String              @unique
  password           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  patients           InstructorPatient[] @relation("Instructor")
  instructors        InstructorPatient[] @relation("Patient")
  seriesAsPatient    PatientSeries[]     @relation("PatientSeries")
  seriesAsInstructor Series[]            @relation("InstructorSeries")
}

model InstructorPatient {
  id           Int  @id @default(autoincrement())
  instructorId Int
  patientId    Int
  instructor   User @relation("Instructor", fields: [instructorId], references: [id])
  patient      User @relation("Patient", fields: [patientId], references: [id])
}

model Therapy {
  id       Int              @id @default(autoincrement())
  name     String
  series   Series[]
  postures TherapyPosture[]
}

model Posture {
  id            Int              @id @default(autoincrement())
  nameEs        String
  nameSans      String
  instructions  String
  benefits      String
  modifications String
  warnings      String
  image         String
  video         String
  seriesLinks   SeriesPosture[]
  therapyLinks  TherapyPosture[]
}

model TherapyPosture {
  therapyId Int
  postureId Int
  posture   Posture @relation(fields: [postureId], references: [id])
  therapy   Therapy @relation(fields: [therapyId], references: [id])

  @@id([therapyId, postureId])
}

model Series {
  id                  Int             @id @default(autoincrement())
  instructorId        Int
  name                String
  therapyId           Int
  recommendedSessions Int
  patientSeries       PatientSeries[]
  instructor          User            @relation("InstructorSeries", fields: [instructorId], references: [id])
  therapy             Therapy         @relation(fields: [therapyId], references: [id])
  postures            SeriesPosture[]
}

model SeriesPosture {
  seriesId        Int
  postureId       Int
  durationMinutes Int
  order           Int
  posture         Posture @relation(fields: [postureId], references: [id])
  series          Series  @relation(fields: [seriesId], references: [id])

  @@id([seriesId, postureId])
}

model PatientSeries {
  id                Int       @id @default(autoincrement())
  patientId         Int
  seriesId          Int
  isActive          Boolean   @default(true)
  assignedAt        DateTime
  sessionsCompleted Int
  patient           User      @relation("PatientSeries", fields: [patientId], references: [id])
  series            Series    @relation(fields: [seriesId], references: [id])
  sessions          Session[]

  @@unique([patientId, seriesId])
}

model PainLevel {
  id             Int       @id @default(autoincrement())
  name           String
  afterSessions  Session[] @relation("PainAfter")
  beforeSessions Session[] @relation("PainBefore")
}

model Session {
  id               Int           @id @default(autoincrement())
  patientSeriesId  Int
  startedAt        DateTime
  endedAt          DateTime
  painBeforeId     Int
  painAfterId      Int
  pauses           Int
  effectiveMinutes Int
  comment          String
  painAfter        PainLevel     @relation("PainAfter", fields: [painAfterId], references: [id])
  painBefore       PainLevel     @relation("PainBefore", fields: [painBeforeId], references: [id])
  patientSeries    PatientSeries @relation(fields: [patientSeriesId], references: [id])
}
