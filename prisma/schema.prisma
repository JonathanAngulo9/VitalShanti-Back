// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  identification String  @unique
  phone          String
  role           String
  email          String  @unique
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaciones como Instructor
  seriesAsInstructor Series[] @relation("InstructorSeries")
  patients           InstructorPatient[] @relation("Instructor")

  // Relaciones como Paciente
  seriesAsPatient    PatientSeries[] @relation("PatientSeries")
  instructors        InstructorPatient[] @relation("Patient")
}

model InstructorPatient {
  id          Int  @id @default(autoincrement())
  instructor  User @relation("Instructor", fields: [instructorId], references: [id])
  instructorId Int
  patient     User @relation("Patient", fields: [patientId], references: [id])
  patientId   Int
}

model Therapy {
  id       Int       @id @default(autoincrement())
  name     String
  series   Series[]
  postures TherapyPosture[]
}

model Posture {
  id            Int       @id @default(autoincrement())
  nameEs        String
  nameSans      String
  instructions  String
  benefits      String
  modifications String
  warnings      String
  image         String
  video         String

  therapyLinks  TherapyPosture[]
  seriesLinks   SeriesPosture[]
}

model TherapyPosture {
  therapy    Therapy @relation(fields: [therapyId], references: [id])
  therapyId  Int
  posture    Posture @relation(fields: [postureId], references: [id])
  postureId  Int

  @@id([therapyId, postureId])
}

model Series {
  id                  Int     @id @default(autoincrement())
  instructor          User    @relation("InstructorSeries", fields: [instructorId], references: [id])
  instructorId        Int
  name                String
  therapy             Therapy @relation(fields: [therapyId], references: [id])
  therapyId           Int
  recommendedSessions Int

  postures            SeriesPosture[]
  patientSeries       PatientSeries[]
}

model SeriesPosture {
  series     Series  @relation(fields: [seriesId], references: [id])
  seriesId   Int
  posture    Posture @relation(fields: [postureId], references: [id])
  postureId  Int
  durationMinutes Int
  order      Int

  @@id([seriesId, postureId])
}

model PatientSeries {
  id               Int       @id @default(autoincrement())
  patient          User      @relation("PatientSeries", fields: [patientId], references: [id])
  patientId        Int
  series           Series    @relation(fields: [seriesId], references: [id])
  seriesId         Int
  isActive         Boolean   @default(true)
  assignedAt       DateTime
  sessionsCompleted Int

  sessions         Session[]
}

model PainLevel {
  id   Int    @id @default(autoincrement())
  name String
  beforeSessions Session[] @relation("PainBefore")
  afterSessions  Session[] @relation("PainAfter")
}

model Session {
  id               Int        @id @default(autoincrement())
  patientSeries    PatientSeries @relation(fields: [patientSeriesId], references: [id])
  patientSeriesId  Int
  startedAt        DateTime
  endedAt          DateTime
  painBefore       PainLevel @relation("PainBefore", fields: [painBeforeId], references: [id])
  painBeforeId     Int
  painAfter        PainLevel @relation("PainAfter", fields: [painAfterId], references: [id])
  painAfterId      Int
  pauses           Int
  effectiveMinutes Int
  comment String @db.Text
}
